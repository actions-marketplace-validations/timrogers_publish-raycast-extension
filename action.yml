name: 'Publish Raycast Extension'
description: Automatically publish changes to a Raycast extension from your own repo to the central `raycast/extensions` repo
branding:
  icon: cast
  color: red
inputs:
  raycast_extensions_fork_full_name:
    description: The full name of your fork of the `raycast/extensions` repo (for example `timrogers/extensions`)
    required: true
  github_access_token:
    description: A GitHub personal access token with the `repo` and `workflow` permissions, used to push to your fork of `raycast/extensions` (see `raycast_extensions_fork_full_name`) and create pull requests to the `raycast/extensions` repo. For security reasons, you should store this as an [encrypted secret](https://docs.github.com/en/actions/security-guides/encrypted-secrets).
    required: true
  github_username:
    description: The username of the GitHub user that the `github_access_token` belongs to
    required: true
  extension_name:
    description: The name of your extension. This should be lower case, with dashes separating words (e.g. `iata-code-decoder`). If you've already published your extension at least once to the `raycast/extensions` repo, this should be the name of the folder under `extensions/` where your extension lives.
    required: true
outputs:
  pull_request_url:
    description: The URL of the pull request to `raycast/extensions`
    value: ${{ steps.create_pull_request.outputs.url }}
runs:
  using: composite
  steps:
    - name: Get information about the current GitHub release
      id: get_github_release
      uses: cardinalby/git-get-release-action@v1
      env:
        # We can use the GitHub Actions-provided token for this step, since it will
        # have access to the repo this action is running in.
        GITHUB_TOKEN: ${{ github.token }}
      with:
        # If there is no release pointing to the SHA, then this step will fail and
        # we will not continue. This makes sense as there is nothing to release.
        commitSha: ${{ env.GITHUB_SHA }}
    - name: Check out the current repo
      uses: actions/checkout@v3
      with:
        path: my-extension
    - name: Check out the `raycast/extensions` repo
      uses: actions/checkout@v3
      with:
        repository: raycast/extensions
        # The GitHub Actions-provided token only has access to the repo where the
        # action is running, and not other repos the user has access to. We use
        # our personal access token which has wider access.
        token: ${{ inputs.github_access_token }}
        path: raycast-extensions
        # To be able to push to our fork, we need to fetch the Git history, not just
        # the HEAD.
        fetch-depth: 0
    - name: Point the cloned `raycast/extensions` repo to the configured fork
      # We have to use our personal access token to access the fork.
      run: git remote add fork https://${{ inputs.github_username }}:${{ inputs.github_access_token }}@github.com/${{ inputs.raycast_extensions_fork_full_name }}.git
      shell: bash
      working-directory: raycast-extensions
    - name: Create a directory for your extension in `raycast/extensions`, if it doesn't exist already
      run: mkdir -p extensions/${{ inputs.extension_name }}
      shell: bash
      working-directory: raycast-extensions
    - name: Remove `.github` directory before copying to `raycast/extensions`
      run: rm -rf .github
      shell: bash
      working-directory: my-extension
    - name: Remove `.git` directory before copying to `raycast/extensions`
      run: rm -rf .git
      shell: bash
      working-directory: my-extension
    - name: Copy extension into the `raycast/extensions` repo
      run: cp -Rf . ../raycast-extensions/extensions/${{ inputs.extension_name }}
      shell: bash
      working-directory: my-extension
    - name: Create a branch for the extension release
      run: git checkout -b ${{ inputs.extension_name }}-${{ steps.get_github_release.outputs.tag_name }}
      shell: bash
      working-directory: raycast-extensions
    - name: Stage changes, ready to commit
      run: git add --all .
      shell: bash
      working-directory: raycast-extensions
    - name: Configure Git user information so we can commit
      run: git config user.name github-actions && git config user.email github-actions@github.com
      shell: bash
      working-directory: raycast-extensions
    - name: Commit changes to release branch
      run: git commit -m 'Update ${{ inputs.extension_name }} to ${{ steps.get_github_release.outputs.tag_name }}' -m "${{ steps.get_github_release.outputs.body }}"
      shell: bash
      working-directory: raycast-extensions
    - name: Push release branch to fork
      run: git push -f fork ${{ inputs.extension_name }}-${{ steps.get_github_release.outputs.tag_name }}
      shell: bash
      working-directory: raycast-extensions
    - name: Create pull request (if it doesn't already exist)
      id: create_pull_request
      # If there is already a PR for this branch, then we'll skip creating a new PR and return the URL of the existing one
      run: echo "::set-output name={url}::$(gh pr create --assignee @me --head ${{ inputs.github_username }}:${{ inputs.extension_name }}-${{ steps.get_github_release.outputs.tag_name }} --fill)"
      shell: bash
      working-directory: raycast-extensions
      env:
        # We have to use our personal access token to access the `raycast/extensions` repo.
        GH_TOKEN: ${{ inputs.github_access_token }}
